return(tries)
}
rm(list=ls(all=TRUE))
library(XML)
library(RCurl)
library(bitops)
library(httr)
library(jiebaRD)
library(jiebaR)
library(NLP)
library(tm)
library(slam)
library(RColorBrewer)
library(wordcloud)
library(topicmodels)
library(igraph)
library(plyr)
URL_ERROR_HANDLE = function(X, MAX_TRI){
if(MAX_TRI==0) return(NULL)
tries = tryCatch(getURL(X,encoding='UTF-8', followlocation=TRUE, verbose=TRUE,ssl.verifypeer = FALSE, .opts=list(timeout=3)), error = function(e) { Sys.sleep(5); URL_ERROR_HANDLE(X,MAXTRI-1) })
return(tries)
}
rm(list=ls(all=TRUE))
library(XML)
library(RCurl)
library(bitops)
library(httr)
library(jiebaRD)
library(jiebaR)
library(NLP)
library(tm)
library(slam)
library(RColorBrewer)
library(wordcloud)
library(topicmodels)
library(igraph)
library(plyr)
URL_ERROR_HANDLE = function(X, MAX_TRI){
if(MAX_TRI==0) return(NULL)
tries = tryCatch(getURL(X,encoding='UTF-8', followlocation=TRUE, verbose=TRUE,ssl.verifypeer = FALSE, .opts=list(timeout=3)), error = function(e) { Sys.sleep(5); return(URL_ERROR_HANDLE(X,MAXTRI-1)) })
return(tries)
}
RATING_PREFIX = "http://codeforces.com/ratings/page/"
RATING_NAME_XPATH = '//tr/td[4]/../td[2]/a'
RATING_SCORE = '//tr/td[4]'
PAGE_NUM = 7
CONTEST_LIM = 7
SUB_LIM = 7
MEMBER_URL_PREFIX = "http://codeforces.com/contests/with/"
CONTEST_XPATH = "//tr/td[4]/a/@href"
SRC_URL_FIX = "http://codeforces.com"
CODE_URL = c("http://codeforces.com/contest/","/submission/" )
SUBMIT_XPATH = "//tr/td[8]/../td[1]/a"
SRC_XPATH = '//pre[@class="prettyprint program-source"]//text()'
member_data = data.frame()
for(i in 1:PAGE_NUM)
{
RAT_URL = paste(RATING_PREFIX,i,sep='',collapse='')
if(!url.exists(RAT_URL)) next
rat_html = URL_ERROR_HANDLE(RAT_URL,5)
rat_xml = htmlParse(rat_html,encoding = 'UTF-8',asText=TRUE)
sig_member = xpathSApply(rat_xml,RATING_NAME_XPATH,sessionEncoding='UTF-8',xmlValue)
sig_member = sig_member[!grepl(pattern = 'Detailed|View all',x = sig_member)]
sig_score = xpathSApply(rat_xml,RATING_SCORE,sessionEncoding='UTF-8',xmlValue)
sig_score = gsub(pattern = '[\r\n \t]', x=sig_score,replacement = '')
member = data.frame(sig_member,sig_score)
member_data = rbind(member_data, member)
}
rm(list=ls(all=TRUE))
library(XML)
library(RCurl)
library(bitops)
library(httr)
library(jiebaRD)
library(jiebaR)
library(NLP)
library(tm)
library(slam)
library(RColorBrewer)
library(wordcloud)
library(topicmodels)
library(igraph)
library(plyr)
URL_ERROR_HANDLE = function(X, MAX_TRI){
if(MAX_TRI==0) return(NULL)
tries = tryCatch(getURL(X,encoding='UTF-8', followlocation=TRUE, ssl.verifypeer = FALSE, .opts=list(timeout=3)), error = function(e) { Sys.sleep(5); return(URL_ERROR_HANDLE(X,MAXTRI-1)) })
return(tries)
}
RATING_PREFIX = "http://codeforces.com/ratings/page/"
RATING_NAME_XPATH = '//tr/td[4]/../td[2]/a'
RATING_SCORE = '//tr/td[4]'
PAGE_NUM = 7
CONTEST_LIM = 7
SUB_LIM = 7
MEMBER_URL_PREFIX = "http://codeforces.com/contests/with/"
CONTEST_XPATH = "//tr/td[4]/a/@href"
SRC_URL_FIX = "http://codeforces.com"
CODE_URL = c("http://codeforces.com/contest/","/submission/" )
SUBMIT_XPATH = "//tr/td[8]/../td[1]/a"
SRC_XPATH = '//pre[@class="prettyprint program-source"]//text()'
member_data = data.frame()
for(i in 1:PAGE_NUM)
{
RAT_URL = paste(RATING_PREFIX,i,sep='',collapse='')
if(!url.exists(RAT_URL)) next
rat_html = URL_ERROR_HANDLE(RAT_URL,5)
rat_xml = htmlParse(rat_html,encoding = 'UTF-8',asText=TRUE)
sig_member = xpathSApply(rat_xml,RATING_NAME_XPATH,sessionEncoding='UTF-8',xmlValue)
sig_member = sig_member[!grepl(pattern = 'Detailed|View all',x = sig_member)]
sig_score = xpathSApply(rat_xml,RATING_SCORE,sessionEncoding='UTF-8',xmlValue)
sig_score = gsub(pattern = '[\r\n \t]', x=sig_score,replacement = '')
member = data.frame(sig_member,sig_score)
member_data = rbind(member_data, member)
}
rm(list=ls(all=TRUE))
library(XML)
library(RCurl)
library(bitops)
library(httr)
library(jiebaRD)
library(jiebaR)
library(NLP)
library(tm)
library(slam)
library(RColorBrewer)
library(wordcloud)
library(topicmodels)
library(igraph)
library(plyr)
URL_ERROR_HANDLE = function(X, MAX_TRI){
if(MAX_TRI==0) return(NULL)
tries = tryCatch(getURL(X,encoding='UTF-8', followlocation=TRUE, ssl.verifypeer = FALSE, .opts=list(timeout=3)), error = function(e) { Sys.sleep(5); return(URL_ERROR_HANDLE(X,MAX_TRI-1)) })
return(tries)
}
RATING_PREFIX = "http://codeforces.com/ratings/page/"
RATING_NAME_XPATH = '//tr/td[4]/../td[2]/a'
RATING_SCORE = '//tr/td[4]'
PAGE_NUM = 7
CONTEST_LIM = 7
SUB_LIM = 7
MEMBER_URL_PREFIX = "http://codeforces.com/contests/with/"
CONTEST_XPATH = "//tr/td[4]/a/@href"
SRC_URL_FIX = "http://codeforces.com"
CODE_URL = c("http://codeforces.com/contest/","/submission/" )
SUBMIT_XPATH = "//tr/td[8]/../td[1]/a"
SRC_XPATH = '//pre[@class="prettyprint program-source"]//text()'
member_data = data.frame()
for(i in 1:PAGE_NUM)
{
RAT_URL = paste(RATING_PREFIX,i,sep='',collapse='')
if(!url.exists(RAT_URL)) next
rat_html = URL_ERROR_HANDLE(RAT_URL,5)
rat_xml = htmlParse(rat_html,encoding = 'UTF-8',asText=TRUE)
sig_member = xpathSApply(rat_xml,RATING_NAME_XPATH,sessionEncoding='UTF-8',xmlValue)
sig_member = sig_member[!grepl(pattern = 'Detailed|View all',x = sig_member)]
sig_score = xpathSApply(rat_xml,RATING_SCORE,sessionEncoding='UTF-8',xmlValue)
sig_score = gsub(pattern = '[\r\n \t]', x=sig_score,replacement = '')
member = data.frame(sig_member,sig_score)
member_data = rbind(member_data, member)
}
View(member_data)
source('C:/Users/KUJeng/Downloads/Project_R-master/CodeStyle_of_Codeforces/warof_par.R', echo=TRUE)
a = c(1,2,3,4,5)
b = c(6,7,8)
ab = list(a,b)
abp = list(a,b,ab)
View(member_data)
member_num = nrow(member_data)
#member_num = 2
nalist = c()
con_list = list()
for(i in 1:member_num)
{
contest_url = paste(MEMBER_URL_PREFIX,member_data[i,1],sep='',collapse = '')
if(!url.exists(contest_url))
{
nalist = c(nalist, i)
next
}
cont_html = URL_ERROR_HANDLE(contest_url,5)
cont_xml = htmlParse(cont_html,encoding='UTF-8',asText=TRUE)
sig_cont = xpathSApply(cont_xml,CONTEST_XPATH,sessionEncoding='UTF-8')[1:CONTEST_LIM]
for(j in 1:length(sig_cont))
{
sig_cont[[j]] = paste(SRC_URL_FIX, sig_cont[[j]], sep='', collapse = '')
}
con_list = list(con_list,sig_cont)
}
member_num = nrow(member_data)
#member_num = 2
nalist = c()
con_list = list()
for(i in 1:member_num)
{
contest_url = paste(MEMBER_URL_PREFIX,member_data[i,1],sep='',collapse = '')
if(!url.exists(contest_url))
{
nalist = c(nalist, i)
next
}
cont_html = URL_ERROR_HANDLE(contest_url,5)
cont_xml = htmlParse(cont_html,encoding='UTF-8',asText=TRUE)
sig_cont = xpathSApply(cont_xml,CONTEST_XPATH,sessionEncoding='UTF-8')[1:CONTEST_LIM]
for(j in 1:length(sig_cont))
{
sig_cont[[j]] = paste(SRC_URL_FIX, sig_cont[[j]], sep='', collapse = '')
}
con_list = rbind(con_list,sig_cont)
}
if(!is.null(nalist))
member_data = member_data[-nalist,]
id_list = list()
for(i in 1:nrow(con_list))
#for(i in 1:1)
{
temp_list = list()
for(j in 1:ncol(con_list))
{
if(!url.exists(as.character(con_list[i,j]))) next
temphtml = URL_ERROR_HANDLE(con_list[i,j],5)
tempxml  = htmlParse(temphtml, encoding = 'UTF-8', asText=TRUE)
sub_id = xpathSApply(tempxml, SUBMIT_XPATH, sessionEncoding='UTF-8',xmlValue)[1:SUB_LIM]
for(k in 1:length(sub_id))
{
sub_id[[k]] = paste(CODE_URL[1], substring(con_list[i,j],regexpr(text =con_list[i,j],pattern = '/contest/[0-9]+$')[[1]]+9), CODE_URL[2], sub_id[[k]], sep='', collapse = '')
}
temp_list = cbind(temp_list, t(sub_id))
}
id_list = list(id_list, temp_list)
}
View(con_list)
if(!is.null(nalist))
member_data = member_data[-nalist,]
id_list = list()
for(i in 1:nrow(con_list))
#for(i in 1:1)
{
temp_list = list()
for(j in 1:ncol(con_list))
{
if(!url.exists(as.character(con_list[i,j]))) next
temphtml = URL_ERROR_HANDLE(con_list[i,j],5)
tempxml  = htmlParse(temphtml, encoding = 'UTF-8', asText=TRUE)
sub_id = xpathSApply(tempxml, SUBMIT_XPATH, sessionEncoding='UTF-8',xmlValue)[1:SUB_LIM]
for(k in 1:length(sub_id))
{
sub_id[[k]] = paste(CODE_URL[1], substring(con_list[i,j],regexpr(text =con_list[i,j],pattern = '/contest/[0-9]+$')[[1]]+9), CODE_URL[2], sub_id[[k]], sep='', collapse = '')
}
temp_list = cbind(temp_list, t(sub_id))
}
id_list = list(id_list, temp_list)
}
id_list[1,2]
id_list[[1,2]]
id_list[[1]]
id_list[[1],2]
id_list[[1,2]]
id_list[[1],[2]]
id_list[[1]]
id_list[[[1]],[[2]]]
id_list[[[1]],[[=2]]
id_list[[[1]],[2]]
id_list[[1]]
id_list[[1]][2]
id_list[[1]][,22]
id_list[[1]][,2]
id_list[[1]][2,]
id_list[[1]][2]
id_list[[1]][[2]]
id_list[[1]][[1,2]]
id_list[[1]][[2]]
id_list[[1]][[1]]
id_list[[1]][[2]]
id_list[[1]]
id_list[[1]][3]
id_list[[1]][2]
id_list[[1]][1]
id_list[[1]][2]
id_list[[1]][[2]]
id_list[[1]][[1]]
help("rbind.fill")
if(!is.null(nalist))
member_data = member_data[-nalist,]
nalist = c()
id_list = list()
for(i in 1:nrow(con_list))
#for(i in 1:1)
{
temp_list = list()
for(j in 1:ncol(con_list))
{
if(!url.exists(as.character(con_list[i,j]))) next
temphtml = URL_ERROR_HANDLE(con_list[i,j],5)
tempxml  = htmlParse(temphtml, encoding = 'UTF-8', asText=TRUE)
sub_id = xpathSApply(tempxml, SUBMIT_XPATH, sessionEncoding='UTF-8',xmlValue)[1:SUB_LIM]
for(k in 1:length(sub_id))
{
sub_id[[k]] = paste(CODE_URL[1], substring(con_list[i,j],regexpr(text =con_list[i,j],pattern = '/contest/[0-9]+$')[[1]]+9), CODE_URL[2], sub_id[[k]], sep='', collapse = '')
}
temp_list = cbind(temp_list, t(sub_id))
}
id_list = rbind.fill(id_list, temp_list)
}
id_list = rbind.fill(id_list, temp_list)
id_list
id_list = rbind(id_list, temp_list, fill=TRUE)
View(id_list)
id_list = rbind.fill(id_list, temp_list)
if(!is.null(nalist))
member_data = member_data[-nalist,]
nalist = c()
id_list = data.frame()
for(i in 1:nrow(con_list))
#for(i in 1:1)
{
temp_list = data.frame()
for(j in 1:ncol(con_list))
{
if(!url.exists(as.character(con_list[i,j]))) next
temphtml = URL_ERROR_HANDLE(con_list[i,j],5)
tempxml  = htmlParse(temphtml, encoding = 'UTF-8', asText=TRUE)
sub_id = xpathSApply(tempxml, SUBMIT_XPATH, sessionEncoding='UTF-8',xmlValue)[1:SUB_LIM]
for(k in 1:length(sub_id))
{
sub_id[[k]] = paste(CODE_URL[1], substring(con_list[i,j],regexpr(text =con_list[i,j],pattern = '/contest/[0-9]+$')[[1]]+9), CODE_URL[2], sub_id[[k]], sep='', collapse = '')
}
temp_list = cbind(temp_list, t(sub_id))
}
id_list = rbind.fill(id_list, temp_list)
}
if(!is.null(nalist))
member_data = member_data[-nalist,]
nalist = c()
id_list = data.frame()
for(i in 1:nrow(con_list))
#for(i in 1:1)
{
temp_list = data.frame()
for(j in 1:ncol(con_list))
{
if(!url.exists(as.character(con_list[i,j]))) next
temphtml = URL_ERROR_HANDLE(con_list[i,j],5)
tempxml  = htmlParse(temphtml, encoding = 'UTF-8', asText=TRUE)
sub_id = xpathSApply(tempxml, SUBMIT_XPATH, sessionEncoding='UTF-8',xmlValue)[1:SUB_LIM]
for(k in 1:length(sub_id))
{
sub_id[[k]] = paste(CODE_URL[1], substring(con_list[i,j],regexpr(text =con_list[i,j],pattern = '/contest/[0-9]+$')[[1]]+9), CODE_URL[2], sub_id[[k]], sep='', collapse = '')
}
temp_list = cbind.fill(temp_list, t(sub_id))
}
id_list = rbind.fill(id_list, temp_list)
}
if(!is.null(nalist))
member_data = member_data[-nalist,]
nalist = c()
id_list = data.frame()
for(i in 1:nrow(con_list))
#for(i in 1:1)
{
temp_list = data.frame()
for(j in 1:ncol(con_list))
{
if(!url.exists(as.character(con_list[i,j]))) next
temphtml = URL_ERROR_HANDLE(con_list[i,j],5)
tempxml  = htmlParse(temphtml, encoding = 'UTF-8', asText=TRUE)
sub_id = xpathSApply(tempxml, SUBMIT_XPATH, sessionEncoding='UTF-8',xmlValue)[1:SUB_LIM]
for(k in 1:length(sub_id))
{
sub_id[[k]] = paste(CODE_URL[1], substring(con_list[i,j],regexpr(text =con_list[i,j],pattern = '/contest/[0-9]+$')[[1]]+9), CODE_URL[2], sub_id[[k]], sep='', collapse = '')
}
temp_list = cbind(temp_list, t(sub_id))
}
id_list = rbind.fill(id_list, temp_list)
}
if(!is.null(nalist))
member_data = member_data[-nalist,]
nalist = c()
id_list = data.frame()
for(i in 1:nrow(con_list))
#for(i in 1:1)
{
temp_list = list()
for(j in 1:ncol(con_list))
{
if(!url.exists(as.character(con_list[i,j]))) next
temphtml = URL_ERROR_HANDLE(con_list[i,j],5)
tempxml  = htmlParse(temphtml, encoding = 'UTF-8', asText=TRUE)
sub_id = xpathSApply(tempxml, SUBMIT_XPATH, sessionEncoding='UTF-8',xmlValue)[1:SUB_LIM]
for(k in 1:length(sub_id))
{
sub_id[[k]] = paste(CODE_URL[1], substring(con_list[i,j],regexpr(text =con_list[i,j],pattern = '/contest/[0-9]+$')[[1]]+9), CODE_URL[2], sub_id[[k]], sep='', collapse = '')
}
temp_list = list(temp_list, t(sub_id))
}
id_list = rbind.fill(id_list, unlist(temp_list))
}
id_list = rbind.fill(id_list, data.frame(unlist(temp_list)))
View(id_list)
id_list = data.frame()
id_list = rbind.fill(id_list, data.frame(t(unlist(temp_list))))
View(id_list)
if(!is.null(nalist))
member_data = member_data[-nalist,]
nalist = c()
id_list = data.frame()
for(i in 1:nrow(con_list))
#for(i in 1:1)
{
temp_list = list()
for(j in 1:ncol(con_list))
{
if(!url.exists(as.character(con_list[i,j]))) next
temphtml = URL_ERROR_HANDLE(con_list[i,j],5)
tempxml  = htmlParse(temphtml, encoding = 'UTF-8', asText=TRUE)
sub_id = xpathSApply(tempxml, SUBMIT_XPATH, sessionEncoding='UTF-8',xmlValue)[1:SUB_LIM]
for(k in 1:length(sub_id))
{
sub_id[[k]] = paste(CODE_URL[1], substring(con_list[i,j],regexpr(text =con_list[i,j],pattern = '/contest/[0-9]+$')[[1]]+9), CODE_URL[2], sub_id[[k]], sep='', collapse = '')
}
temp_list = list(temp_list, t(sub_id))
}
id_list = rbind.fill(id_list, data.frame(t(unlist(temp_list))))
}
View(id_list)
source('C:/Users/KUJeng/Downloads/Project_R-master/CodeStyle_of_Codeforces/warof_par.R', echo=TRUE)
View(member_data)
View(con_list)
View(member_data)
if(!is.null(nalist))
member_data = member_data[-nalist,]
nalist = c()
id_list = data.frame()
for(i in 1:nrow(con_list))
#for(i in 1:1)
{
temp_list = list()
for(j in 1:ncol(con_list))
{
if(!url.exists(as.character(con_list[i,j]))) next
temphtml = URL_ERROR_HANDLE(con_list[i,j],5)
tempxml  = htmlParse(temphtml, encoding = 'UTF-8', asText=TRUE)
sub_id = xpathSApply(tempxml, SUBMIT_XPATH, sessionEncoding='UTF-8',xmlValue)[1:SUB_LIM]
for(k in 1:length(sub_id))
{
sub_id[[k]] = paste(CODE_URL[1], substring(con_list[i,j],regexpr(text =con_list[i,j],pattern = '/contest/[0-9]+$')[[1]]+9), CODE_URL[2], sub_id[[k]], sep='', collapse = '')
}
temp_list = list(temp_list, t(sub_id))
}
id_list = rbind.fill(id_list, data.frame(t(unlist(temp_list))))
}
dir.create('D_CODE')
i=1
for(i in i:nrow(id_list))
{
dname = paste('./D_CODE/',member_data[i,1],sep='',collapse='')
dir.create(dname)
row_code = list()
for(j in 1:ncol(id_list))
{
re = regexpr(text =id_list[i,j],pattern = '/submission/[0-9]+$')[[1]]
if(!url.exists(as.character(id_list[i,j])) || re==-1) next
temphtml = URL_ERROR_HANDLE(id_list[i,j],5)
tempxml  = htmlParse(temphtml, encoding='UTF-8', asText=TRUE)
content_src = xpathSApply(tempxml, SRC_XPATH, sessionEncoding='UTF-8',xmlValue)
write(content_src,paste(dname,'/',substring(id_list[i,j],re+12),'.txt',sep=''))
}
}
View(con_list)
View(id_list)
id_list
id_list[1]
id_list[1,]
id_list[19,]
source('C:/Users/KUJeng/Downloads/Project_R-master/CodeStyle_of_Codeforces/warof_par.R', echo=TRUE)
source('C:/Users/KUJeng/Downloads/Project_R-master/CodeStyle_of_Codeforces/warof_par.R', echo=TRUE)
source('C:/Users/KUJeng/Downloads/Project_R-master/CodeStyle_of_Codeforces/warof_par.R', echo=TRUE)
nalist = c()
con_list = data.frame()
for(i in 1:member_num)
{
contest_url = paste(MEMBER_URL_PREFIX,member_data[i,1],sep='',collapse = '')
if(!url.exists(contest_url))
{
nalist = c(nalist, i)
next
}
cont_html = URL_ERROR_HANDLE(contest_url,5)
cont_xml = htmlParse(cont_html,encoding='UTF-8',asText=TRUE)
sig_cont = xpathSApply(cont_xml,CONTEST_XPATH,sessionEncoding='UTF-8')[1:CONTEST_LIM]
for(j in 1:length(sig_cont))
{
sig_cont[[j]] = paste(SRC_URL_FIX, sig_cont[[j]], sep='', collapse = '')
}
con_list = rbind.fill(con_list,data.frame(t(unlist(sig_cont))))
}
View(con_list)
source('C:/Users/KUJeng/Downloads/Project_R-master/CodeStyle_of_Codeforces/warof_par.R', echo=TRUE)
View(id_list)
print('hello')
source('C:/Users/KUJeng/Downloads/Project_R-master/CodeStyle_of_Codeforces/warof_par.R', echo=TRUE)
source('C:/Users/KUJeng/Downloads/Project_R-master/CodeStyle_of_Codeforces/warof_par.R', echo=TRUE)
source('C:/Users/KUJeng/Downloads/Project_R-master/CodeStyle_of_Codeforces/warof_par.R', echo=TRUE)
source('C:/Users/KUJeng/Downloads/Project_R-master/CodeStyle_of_Codeforces/ana.R', echo=TRUE)
View(style_vs_score)
rev(style_vs_score$sig_right_e)
plot(x=rev(style_vs_score$sig_right_e))
plot(x=rev(style_vs_score$sig_right_e),type='h')
plot(x=rev(style_vs_score$sig_right_e),type='h', col=rgb(0.33,0.59,0.11,0.5))
plot(x=rev(style_vs_score$sig_new_e),type='h', col=rgb(0.33,0.59,0.11,0.5))
plot(x=rev(style_vs_score$sig_newline_e),type='h', col=rgb(0.33,0.59,0.11,0.5))
plot(x=rev(style_vs_score$sig_newline_e), col=rgb(0.33,0.59,0.11,0.5))
plot(x=rev(style_vs_score$sig_right_e), col=rgb(0.33,0.59,0.11,0.5))
