shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
cordData = read.csv("1050429.csv",encoding="utf-8")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
runApp()
runApp()
runApp()
data <- readLines("1050429.csv", encoding="big5") # 讀取實價登入資料，是一行一行讀取進來。
data <- iconv(data, "big5", "utf8") # 將資料轉成 UTF-8。
column_count <- length(strsplit(data[1], ",")[[1]])
row_count <- length(data) # 計算 column 與 count 個數。
fix_data <- matrix(NA, nrow = row_count, ncol = column_count) # 建立一個空的 NA 矩陣，維度來自於 row_count 與 column_count。
for(row in 1:row_count) {
for(col in 1:column_count) {
fix_data[row,col] <- strsplit(data[row], ",")[[1]][col] # 執行 for loop 將資料塞入 fix_data。
}
}
write.table(fix_data[2:row_count,], file = "1050429_fix.csv", sep = ",", col.names = fix_data[1,])
runApp()
runApp()
main_Data_dir = "PowerData"
mainData = data.frame()
from_y = 104
to_y = 105
from_m = 1
to_m = 12
for(i in from_y:to_y)
{
for(j in from_m:to_m)
{
f_Path = paste(main_Data_dir,"/test-",i,j,".csv",sep="")
if(file.exists(f_Path))
{
data <- readLines(f_Path, encoding="big5") # 讀取實價登入資料，是一行一行讀取進來。
data <- iconv(data, "big5", "utf8") # 將資料轉成 UTF-8。
column_count <- length(strsplit(data[1], ",")[[1]])
row_count <- length(data) # 計算 column 與 count 個數。
fix_data <- matrix(NA, nrow = row_count, ncol = column_count) # 建立一個空的 NA 矩陣，維度來自於 row_count 與 column_count。
for(row in 1:row_count) {
for(col in 1:column_count) {
fix_data[row,col] <- strsplit(data[row], ",")[[1]][col] # 執行 for loop 將資料塞入 fix_data。
}
}
write.table(fix_data[2:row_count,], file = paste(fpath,".fixed",sep=''), sep = ",", col.names = fix_data[1,])
}
}
}
main_Data_dir = "PowerData"
mainData = data.frame()
from_y = 104
to_y = 105
from_m = 1
to_m = 12
for(i in from_y:to_y)
{
for(j in from_m:to_m)
{
f_Path = paste(main_Data_dir,"/test-",i,j,".csv",sep="")
if(file.exists(f_Path))
{
data <- readLines(f_Path, encoding="big5") # 讀取實價登入資料，是一行一行讀取進來。
data <- iconv(data, "big5", "utf8") # 將資料轉成 UTF-8。
column_count <- length(strsplit(data[1], ",")[[1]])
row_count <- length(data) # 計算 column 與 count 個數。
fix_data <- matrix(NA, nrow = row_count, ncol = column_count) # 建立一個空的 NA 矩陣，維度來自於 row_count 與 column_count。
for(row in 1:row_count) {
for(col in 1:column_count) {
fix_data[row,col] <- strsplit(data[row], ",")[[1]][col] # 執行 for loop 將資料塞入 fix_data。
}
}
write.table(fix_data[2:row_count,], file = paste(f_Path,".fixed",sep=''), sep = ",", col.names = fix_data[1,])
}
}
}
main_Data_dir = "PowerData"
mainData = data.frame()
from_y = 104
to_y = 105
from_m = 1
to_m = 12
for(i in from_y:to_y)
{
for(j in from_m:to_m)
{
f_Path = paste(main_Data_dir,"/test-",i,j,".csv",sep="")
if(file.exists(f_Path))
{
data <- readLines(f_Path, encoding="big5") # 讀取實價登入資料，是一行一行讀取進來。
data <- iconv(data, "big5", "utf8") # 將資料轉成 UTF-8。
column_count <- length(strsplit(data[1], ",")[[1]])
row_count <- length(data) # 計算 column 與 count 個數。
fix_data <- matrix(NA, nrow = row_count, ncol = column_count) # 建立一個空的 NA 矩陣，維度來自於 row_count 與 column_count。
for(row in 1:row_count) {
for(col in 1:column_count) {
fix_data[row,col] <- strsplit(data[row], ",")[[1]][col] # 執行 for loop 將資料塞入 fix_data。
}
}
write.table(fix_data[2:row_count,], file = paste(f_Path,".fixed",sep=''), sep = ",", col.names = fix_data[1,])
}
}
}
main_Data_dir = "PowerData"
mainData = data.frame()
from_y = 104
to_y = 105
from_m = 1
to_m = 12
for(i in from_y:to_y)
{
for(j in from_m:to_m)
{
f_Path = paste(main_Data_dir,"/test-",i,j,".csv",sep="")
if(file.exists(f_Path))
{
f_Path
data <- readLines(f_Path, encoding="big5") # 讀取實價登入資料，是一行一行讀取進來。
data <- iconv(data, "big5", "utf8") # 將資料轉成 UTF-8。
column_count <- length(strsplit(data[1], ",")[[1]])
row_count <- length(data) # 計算 column 與 count 個數。
fix_data <- matrix(NA, nrow = row_count, ncol = column_count) # 建立一個空的 NA 矩陣，維度來自於 row_count 與 column_count。
for(row in 1:row_count) {
for(col in 1:column_count) {
fix_data[row,col] <- strsplit(data[row], ",")[[1]][col] # 執行 for loop 將資料塞入 fix_data。
}
}
write.table(fix_data[2:row_count,], file = paste(f_Path,".fixed",sep=''), sep = ",", col.names = fix_data[1,])
}
}
}
main_Data_dir = "PowerData"
mainData = data.frame()
from_y = 104
to_y = 105
from_m = 1
to_m = 12
for(i in from_y:to_y)
{
for(j in from_m:to_m)
{
f_Path = paste(main_Data_dir,"/test-",i,j,".csv",sep="")
if(file.exists(f_Path))
{
print(f_Path)
data <- readLines(f_Path, encoding="big5") # 讀取實價登入資料，是一行一行讀取進來。
data <- iconv(data, "big5", "utf8") # 將資料轉成 UTF-8。
column_count <- length(strsplit(data[1], ",")[[1]])
row_count <- length(data) # 計算 column 與 count 個數。
fix_data <- matrix(NA, nrow = row_count, ncol = column_count) # 建立一個空的 NA 矩陣，維度來自於 row_count 與 column_count。
for(row in 1:row_count) {
for(col in 1:column_count) {
fix_data[row,col] <- strsplit(data[row], ",")[[1]][col] # 執行 for loop 將資料塞入 fix_data。
}
}
write.table(fix_data[2:row_count,], file = paste(f_Path,".fixed",sep=''), sep = ",", col.names = fix_data[1,])
}
}
}
main_Data_dir = "PowerData"
mainData = data.frame()
from_y = 104
to_y = 105
from_m = 1
to_m = 12
for(i in from_y:to_y)
{
idy = sprintf("%03d", i)
for(j in from_m:to_m)
{
idm = sprintf("%02d", j)
f_Path = paste(main_Data_dir,"/test-",idy,idm,".csv",sep="")
if(file.exists(f_Path))
{
print(f_Path)
data <- readLines(f_Path, encoding="big5") # 讀取實價登入資料，是一行一行讀取進來。
data <- iconv(data, "big5", "utf8") # 將資料轉成 UTF-8。
column_count <- length(strsplit(data[1], ",")[[1]])
row_count <- length(data) # 計算 column 與 count 個數。
fix_data <- matrix(NA, nrow = row_count, ncol = column_count) # 建立一個空的 NA 矩陣，維度來自於 row_count 與 column_count。
for(row in 1:row_count) {
for(col in 1:column_count) {
fix_data[row,col] <- strsplit(data[row], ",")[[1]][col] # 執行 for loop 將資料塞入 fix_data。
}
}
write.table(fix_data[2:row_count,], file = paste(f_Path,".fixed",sep=''), sep = ",", col.names = fix_data[1,])
}
}
}
main_Data_dir = "PowerData"
mainData = data.frame()
from_y = 104
to_y = 105
from_m = 1
to_m = 12
for(i in from_y:to_y)
{
idy = sprintf("%03d", i)
for(j in from_m:to_m)
{
idm = sprintf("%02d", j)
f_Path = paste(main_Data_dir,"/test-",idy,idm,".csv",sep="")
if(file.exists(f_Path))
{
print(f_Path)
data <- readLines(f_Path, encoding="big5") # 讀取實價登入資料，是一行一行讀取進來。
data <- iconv(data, "big5", "utf8") # 將資料轉成 UTF-8。
column_count <- length(strsplit(data[1], ",")[[1]])
row_count <- length(data) # 計算 column 與 count 個數。
fix_data <- matrix(NA, nrow = row_count, ncol = column_count) # 建立一個空的 NA 矩陣，維度來自於 row_count 與 column_count。
for(row in 1:row_count) {
for(col in 1:column_count) {
fix_data[row,col] <- strsplit(data[row], ",")[[1]][col] # 執行 for loop 將資料塞入 fix_data。
}
}
write.table(fix_data[2:row_count,], file = paste(f_Path,".fixed",sep=''), sep = ",", col.names = fix_data[1,])
}
}
}
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(regData)
regData$行政區
Encoding(regData$行政區)
Encoding(regData$行政區[1])
data.class(regData$行政區)
Encoding(regData$行政區)
Encoding(as.character(regData$行政區))
Encoding(as.character(regData$行政區[1]))
as.character(regData$行政區[1]
)
test = as.character(regData$行政區[1])
Encoding(test)
Encoding(test) <- "utf8"
test
Encoding(test) <- "big5"
test
iconv_get_encoding
runApp()
deploy()
library(rsconnect)
deploy()
deployApp()
View(cordData)
runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(cordData)
View(regData)
runApp()
runApp()
runApp()
runApp()
View(regTypeLev)
write(regTypeLev$x,"type.txt")
write.csv(regTypeLev,"type.csv")
install.packages("plotrix")
runApp()
runApp()
pieData = data.frame(
regData[grepl("13\u4f4e\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6],
regData[grepl("16\u9ad8\uff06\u7279\u9ad8\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6],
regData[grepl("1\u8868\u71c8\u975e\u71df\u696d\u7528",regData[,3]),6],
regData[grepl("22\u81e8\u6642\u7528\u96fb\u5c0f\u8a08",regData[,3]),6],
regData[grepl("2\u8868\u71c8\u71df\u696d\u7528",regData[,3]),6],
regData[grepl("6\u4f4e\u58d3\u7d9c\u5408\u975e\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6],
regData[grepl("9\u4f4e\u58d3\u7d9c\u5408\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6]
)
names(pieData) = c(
"\u5c0f\u578b\u88fd\u9020\u696d",
"\u5de5\u696d",
"\u6c11\u751f\u7528\u96fb",
"\u81e8\u6642\u7528\u96fb",
"\u5546\u5bb6\u7528\u96fb",
"\u516c\u5171\u8a2d\u65bd",
"\u5546\u5bb6\u7528\u96fb"
)
pie3D(pieData, labels=names(pieData), explode=0.05, main="3D \u7528\u96fb\u6bd4\u4f8b\u5713\u9905\u5716",
labelcex=0.8,col=c("blue","red","yellow","lightgray","darkgrey","black","green")
)
pieData = data.frame(
regData[grepl("13\u4f4e\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6],
regData[grepl("16\u9ad8\uff06\u7279\u9ad8\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6],
regData[grepl("1\u8868\u71c8\u975e\u71df\u696d\u7528",regData[,3]),6],
regData[grepl("22\u81e8\u6642\u7528\u96fb\u5c0f\u8a08",regData[,3]),6],
regData[grepl("2\u8868\u71c8\u71df\u696d\u7528",regData[,3]),6],
regData[grepl("6\u4f4e\u58d3\u7d9c\u5408\u975e\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6],
regData[grepl("9\u4f4e\u58d3\u7d9c\u5408\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6]
)
grepl("13\u4f4e\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3])
regData[grepl("13\u4f4e\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6]
pieData = data.frame(
sum(regData[grepl("13\u4f4e\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("16\u9ad8\uff06\u7279\u9ad8\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("1\u8868\u71c8\u975e\u71df\u696d\u7528",regData[,3]),6]),
sum(regData[grepl("22\u81e8\u6642\u7528\u96fb\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("2\u8868\u71c8\u71df\u696d\u7528",regData[,3]),6]),
sum(regData[grepl("6\u4f4e\u58d3\u7d9c\u5408\u975e\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("9\u4f4e\u58d3\u7d9c\u5408\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6])
)
View(pieData)
pieData = data.frame(
sum(regData[grepl("13\u4f4e\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("16\u9ad8\uff06\u7279\u9ad8\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("1\u8868\u71c8\u975e\u71df\u696d\u7528",regData[,3]),6]),
sum(regData[grepl("22\u81e8\u6642\u7528\u96fb\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("2\u8868\u71c8\u71df\u696d\u7528",regData[,3]),6]),
sum(regData[grepl("6\u4f4e\u58d3\u7d9c\u5408\u975e\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("9\u4f4e\u58d3\u7d9c\u5408\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6])
)
names(pieData) = c(
"\u5c0f\u578b\u88fd\u9020\u696d",
"\u5de5\u696d",
"\u6c11\u751f\u7528\u96fb",
"\u81e8\u6642\u7528\u96fb",
"\u5546\u5bb6\u7528\u96fb",
"\u516c\u5171\u8a2d\u65bd",
"\u5546\u5bb6\u7528\u96fb"
)
pie3D(pieData, labels=names(pieData), explode=0.05, main="3D \u7528\u96fb\u6bd4\u4f8b\u5713\u9905\u5716",
labelcex=0.8,col=c("blue","red","yellow","lightgray","darkgrey","black","green")
)
View(cordData)
View(pieData)
pieData = data.frame(
sum(regData[grepl("13\u4f4e\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("16\u9ad8\uff06\u7279\u9ad8\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("1\u8868\u71c8\u975e\u71df\u696d\u7528",regData[,3]),6]),
sum(regData[grepl("22\u81e8\u6642\u7528\u96fb\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("2\u8868\u71c8\u71df\u696d\u7528",regData[,3]),6]),
sum(regData[grepl("6\u4f4e\u58d3\u7d9c\u5408\u975e\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("9\u4f4e\u58d3\u7d9c\u5408\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6])
)
names(pieData) = c(
"\u5c0f\u578b\u88fd\u9020\u696d",
"\u5de5\u696d",
"\u6c11\u751f\u7528\u96fb",
"\u81e8\u6642\u7528\u96fb",
"\u5546\u5bb6\u7528\u96fb",
"\u516c\u5171\u8a2d\u65bd",
"\u5546\u5bb6\u7528\u96fb"
)
pie3D(t(pieData), labels=names(pieData), explode=0.05, main="3D \u7528\u96fb\u6bd4\u4f8b\u5713\u9905\u5716",
labelcex=0.8,col=c("blue","red","yellow","lightgray","darkgrey","black","green")
)
pieData = data.frame(
sum(regData[grepl("13\u4f4e\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("16\u9ad8\uff06\u7279\u9ad8\u58d3\u96fb\u529b\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("1\u8868\u71c8\u975e\u71df\u696d\u7528",regData[,3]),6]),
sum(regData[grepl("22\u81e8\u6642\u7528\u96fb\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("2\u8868\u71c8\u71df\u696d\u7528",regData[,3]),6]),
sum(regData[grepl("6\u4f4e\u58d3\u7d9c\u5408\u975e\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6]),
sum(regData[grepl("9\u4f4e\u58d3\u7d9c\u5408\u71df\u696d\u7528\u96fb\u5c0f\u8a08",regData[,3]),6])
)
names(pieData) = c(
"\u5c0f\u578b\u88fd\u9020\u696d",
"\u5de5\u696d",
"\u6c11\u751f\u7528\u96fb",
"\u81e8\u6642\u7528\u96fb",
"\u5546\u5bb6\u7528\u96fb",
"\u516c\u5171\u8a2d\u65bd",
"\u5546\u5bb6\u7528\u96fb"
)
pie3D(t(pieData), labels=names(pieData), explode=0.05, main="\u7528\u96fb\u6bd4\u4f8b\u5713\u9905\u5716",
labelcex=0.8,col=c("blue","red","yellow","lightgray","darkgrey","black","green")
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test = download.file("http://data.taipower.com.tw/opendata/apply/file/d006007/%E5%8F%B0%E7%81%A3%E9%9B%BB%E5%8A%9B%E5%85%AC%E5%8F%B8_%E6%9C%AA%E4%BE%86%E4%B8%80%E9%80%B1%E9%9B%BB%E5%8A%9B%E4%BE%9B%E9%9C%80%E9%A0%90%E6%B8%AC.txt")
download.file("http://data.taipower.com.tw/opendata/apply/file/d006007/%E5%8F%B0%E7%81%A3%E9%9B%BB%E5%8A%9B%E5%85%AC%E5%8F%B8_%E6%9C%AA%E4%BE%86%E4%B8%80%E9%80%B1%E9%9B%BB%E5%8A%9B%E4%BE%9B%E9%9C%80%E9%A0%90%E6%B8%AC.txt",destfile="future.txt")
test = read.table("future.txt")
View(test)
test = read.csv("future.txt")
View(test)
View(test)
test = read.csv("future.txt", header=F)
View(test)
rm(list=ls(all=TRUE))
rm(list=ls(all=TRUE))
shiny::runApp()
